import { Injectable } from '@nestjs/common';import OpenAI from 'openai';export interface CelebritySearchResult {  name: string;  category: string;  country: string;  description: string;  confidence: number;  suggestedData: {    firstName: string;    lastName: string;    stageName?: string;    bio: string;    industries: string[];    socialHandles: {      instagram?: string;      twitter?: string;      youtube?: string;      spotify?: string;      tiktok?: string;      facebook?: string;    };    estimatedFanbase?: number;    recentNews?: string[];  };}@Injectable()export class AiService {  private openai: OpenAI | null = null;  constructor() {    if (process.env.OPENAI_API_KEY) {      this.openai = new OpenAI({        apiKey: process.env.OPENAI_API_KEY,      });    } else {      console.warn('OpenAI API key not provided. AI features will be disabled.');    }  }  async searchCelebrities(query: string): Promise<CelebritySearchResult[]> {    if (!this.openai) {      throw new Error('OpenAI API key is required for celebrity search functionality');    }    try {      const prompt = `        You are a celebrity discovery engine. Given the following description, suggest 3-5 possible celebrities that match:                Description: "${query}"                For each celebrity, provide:        - Name        - Category (Singer, Actor, Athlete, etc.)        - Country        - Brief description        - Confidence score (0-100)        - Detailed suggested data for profile creation                Response format (JSON array):        [          {            "name": "Celebrity Name",            "category": "Singer",            "country": "Country",            "description": "Brief description",            "confidence": 95,            "suggestedData": {              "firstName": "First",              "lastName": "Last",              "stageName": "Stage Name",              "bio": "Detailed biography",              "industries": ["Music", "Entertainment"],              "socialHandles": {                "instagram": "@handle",                "twitter": "@handle",                "youtube": "@handle",                "spotify": "artist-id"              },              "estimatedFanbase": 1000000            }          }        ]      `;      const response = await this.openai.chat.completions.create({        model: 'gpt-3.5-turbo',        messages: [{ role: 'user', content: prompt }],        temperature: 0.3,      });      const content = response.choices[0]?.message?.content;      if (content) {        try {          return JSON.parse(content);        } catch (parseError) {          console.error('Failed to parse OpenAI response:', parseError);          throw new Error('Failed to process AI response');        }      }    } catch (error) {      console.error('OpenAI API error:', error);      throw new Error('AI service temporarily unavailable');    }    throw new Error('No search results available');  }  async enrichCelebrityData(celebrityName: string): Promise<Partial<CelebritySearchResult['suggestedData']>> {    if (!this.openai) {      throw new Error('OpenAI API key is required for data enrichment');    }    try {      const prompt = `        Provide detailed information about the celebrity "${celebrityName}" in this exact JSON format:        {          "bio": "Detailed biography (2-3 sentences)",          "industries": ["Industry1", "Industry2"],          "socialHandles": {            "instagram": "@handle",            "twitter": "@handle",             "youtube": "@handle",            "spotify": "artist-id"          },          "estimatedFanbase": 1000000,          "recentNews": ["Recent news item 1", "Recent news item 2"]        }      `;      const response = await this.openai.chat.completions.create({        model: 'gpt-3.5-turbo',        messages: [{ role: 'user', content: prompt }],        temperature: 0.3,      });      const content = response.choices[0]?.message?.content;      if (content) {        try {          return JSON.parse(content);        } catch (parseError) {          console.error('Failed to parse enrichment response:', parseError);          throw new Error('Failed to process enrichment data');        }      }    } catch (error) {      console.error('OpenAI enrichment error:', error);      throw new Error('AI enrichment service temporarily unavailable');    }    throw new Error('No enrichment data available');  }}